<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.fxanhkhoa.what_to_eat_android&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.fxanhkhoa.what_to_eat_android&quot;&#10;        minSdk = 28&#10;        targetSdk = 36&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    signingConfigs {&#10;        create(&quot;release&quot;) {&#10;            // Example keystore configuration&#10;            // Replace these values with your actual keystore details&#10;            storeFile = file(&quot;/Users/khoabui/keystore_fxanhkhoa_account/upload-keystore.jks&quot;)&#10;            storePassword = &quot;Buianhkhoa03021996!&quot;&#10;            keyAlias = &quot;upload&quot;&#10;            keyPassword = &quot;Buianhkhoa03021996!&quot;&#10;&#10;            // Uncomment if you want to use environment variables (recommended for CI/CD)&#10;            // storeFile = file(System.getProperty(&quot;user.home&quot;) + &quot;/.android/what_to_eat_release.jks&quot;)&#10;            // storePassword = System.getenv(&quot;KEYSTORE_PASSWORD&quot;)&#10;            // keyAlias = System.getenv(&quot;KEY_ALIAS&quot;)&#10;            // keyPassword = System.getenv(&quot;KEY_PASSWORD&quot;)&#10;        }&#10;    }&#10;&#10;    buildTypes {&#10;        debug {&#10;            buildConfigField(&quot;String&quot;, &quot;API_URL&quot;, &quot;\&quot;https://api.eatwhat.io.vn/\&quot;&quot;)&#10;            // Debug builds use debug keystore automatically&#10;        }&#10;        release {&#10;            buildConfigField(&quot;String&quot;, &quot;API_URL&quot;, &quot;\&quot;https://api.eatwhat.io.vn/\&quot;&quot;)&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;            // Use the release signing config&#10;            signingConfig = signingConfigs.getByName(&quot;release&quot;)&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;        buildConfig = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.compose.ui)&#10;    implementation(libs.androidx.compose.ui.graphics)&#10;    implementation(libs.androidx.compose.ui.tooling.preview)&#10;    implementation(libs.androidx.compose.material3)&#10;    implementation(&quot;androidx.navigation:navigation-compose:2.7.4&quot;)&#10;    implementation(&quot;androidx.compose.material:material-icons-extended:1.5.4&quot;)&#10;&#10;    // DataStore for theme persistence&#10;    implementation(&quot;androidx.datastore:datastore-preferences:1.0.0&quot;)&#10;&#10;    // AppCompat for locale management&#10;    implementation(&quot;androidx.appcompat:appcompat:1.6.1&quot;)&#10;&#10;    // Google Sign-In&#10;    implementation(&quot;com.google.android.gms:play-services-auth:20.7.0&quot;)&#10;    &#10;    // JWT parsing for token expiry detection&#10;    implementation(&quot;com.auth0:java-jwt:4.4.0&quot;)&#10;&#10;    // Retrofit&#10;    implementation(&quot;com.squareup.retrofit2:retrofit:2.9.0&quot;)&#10;    implementation(&quot;com.squareup.retrofit2:converter-gson:2.9.0&quot;)&#10;    // OkHttp&#10;    implementation(&quot;com.squareup.okhttp3:okhttp:4.12.0&quot;)&#10;    implementation(&quot;com.squareup.okhttp3:logging-interceptor:4.12.0&quot;)&#10;    // Gson&#10;    implementation(&quot;com.google.code.gson:gson:2.10.1&quot;)&#10;&#10;    // Image loading for user avatars&#10;    implementation(&quot;io.coil-kt:coil-compose:2.5.0&quot;)&#10;&#10;    // ViewModel&#10;    implementation(&quot;androidx.lifecycle:lifecycle-viewmodel-compose:2.7.0&quot;)&#10;    implementation(&quot;androidx.compose.runtime:runtime-livedata:1.5.4&quot;)&#10;&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.compose.ui.test.junit4)&#10;    debugImplementation(libs.androidx.compose.ui.tooling)&#10;    debugImplementation(libs.androidx.compose.ui.test.manifest)&#10;}" />
              <option name="updatedContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.fxanhkhoa.what_to_eat_android&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.fxanhkhoa.what_to_eat_android&quot;&#10;        minSdk = 28&#10;        targetSdk = 36&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    signingConfigs {&#10;        create(&quot;release&quot;) {&#10;            // Example keystore configuration&#10;            // Replace these values with your actual keystore details&#10;            storeFile = file(&quot;/Users/khoabui/keystore_fxanhkhoa_account/upload-keystore.jks&quot;)&#10;            storePassword = &quot;Buianhkhoa03021996!&quot;&#10;            keyAlias = &quot;upload&quot;&#10;            keyPassword = &quot;Buianhkhoa03021996!&quot;&#10;&#10;            // Uncomment if you want to use environment variables (recommended for CI/CD)&#10;            // storeFile = file(System.getProperty(&quot;user.home&quot;) + &quot;/.android/what_to_eat_release.jks&quot;)&#10;            // storePassword = System.getenv(&quot;KEYSTORE_PASSWORD&quot;)&#10;            // keyAlias = System.getenv(&quot;KEY_ALIAS&quot;)&#10;            // keyPassword = System.getenv(&quot;KEY_PASSWORD&quot;)&#10;        }&#10;    }&#10;&#10;    buildTypes {&#10;        debug {&#10;            buildConfigField(&quot;String&quot;, &quot;API_URL&quot;, &quot;\&quot;https://api.eatwhat.io.vn/\&quot;&quot;)&#10;            // Debug builds use debug keystore automatically&#10;        }&#10;        release {&#10;            buildConfigField(&quot;String&quot;, &quot;API_URL&quot;, &quot;\&quot;https://api.eatwhat.io.vn/\&quot;&quot;)&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;            // Use the release signing config&#10;            signingConfig = signingConfigs.getByName(&quot;release&quot;)&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;        buildConfig = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.compose.ui)&#10;    implementation(libs.androidx.compose.ui.graphics)&#10;    implementation(libs.androidx.compose.ui.tooling.preview)&#10;    implementation(libs.androidx.compose.material3)&#10;    implementation(&quot;androidx.navigation:navigation-compose:2.7.4&quot;)&#10;    implementation(&quot;androidx.compose.material:material-icons-extended:1.5.4&quot;)&#10;&#10;    // DataStore for theme persistence&#10;    implementation(&quot;androidx.datastore:datastore-preferences:1.0.0&quot;)&#10;&#10;    // AppCompat for locale management&#10;    implementation(&quot;androidx.appcompat:appcompat:1.6.1&quot;)&#10;&#10;    // Google Sign-In&#10;    implementation(&quot;com.google.android.gms:play-services-auth:20.7.0&quot;)&#10;    &#10;    // JWT parsing for token expiry detection&#10;    implementation(&quot;com.auth0:java-jwt:4.4.0&quot;)&#10;&#10;    // Retrofit&#10;    implementation(&quot;com.squareup.retrofit2:retrofit:2.9.0&quot;)&#10;    implementation(&quot;com.squareup.retrofit2:converter-gson:2.9.0&quot;)&#10;    // OkHttp&#10;    implementation(&quot;com.squareup.okhttp3:okhttp:4.12.0&quot;)&#10;    implementation(&quot;com.squareup.okhttp3:logging-interceptor:4.12.0&quot;)&#10;    // Gson&#10;    implementation(&quot;com.google.code.gson:gson:2.10.1&quot;)&#10;&#10;    // Image loading for user avatars&#10;    implementation(&quot;io.coil-kt:coil-compose:2.5.0&quot;)&#10;&#10;    // ViewModel&#10;    implementation(&quot;androidx.lifecycle:lifecycle-viewmodel-compose:2.7.0&quot;)&#10;    implementation(&quot;androidx.compose.runtime:runtime-livedata:1.5.4&quot;)&#10;&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.compose.ui.test.junit4)&#10;    debugImplementation(libs.androidx.compose.ui.tooling)&#10;    debugImplementation(libs.androidx.compose.ui.test.manifest)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/fxanhkhoa/what_to_eat_android/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/fxanhkhoa/what_to_eat_android/MainActivity.kt" />
              <option name="originalContent" value="package com.fxanhkhoa.what_to_eat_android&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Modifier&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.compose.rememberNavController&#10;import com.fxanhkhoa.what_to_eat_android.ui.theme.ThemeProvider&#10;import com.fxanhkhoa.what_to_eat_android.ui.components.FancyBottomNavigationBar&#10;import com.fxanhkhoa.what_to_eat_android.ui.components.TopAppBarWithUserIcon&#10;import com.fxanhkhoa.what_to_eat_android.ui.components.bottomNavItems&#10;import com.fxanhkhoa.what_to_eat_android.screens.*&#10;import com.fxanhkhoa.what_to_eat_android.utils.rememberSharedAuthViewModel&#10;import com.fxanhkhoa.what_to_eat_android.viewmodel.AuthViewModel&#10;&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            ThemeProvider {&#10;                MainScreen()&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun MainScreen() {&#10;    val navController = rememberNavController()&#10;    var selectedItemIndex by remember { mutableIntStateOf(0) }&#10;    val authViewModel = rememberSharedAuthViewModel()&#10;&#10;    Scaffold(&#10;        modifier = Modifier.fillMaxSize(),&#10;        topBar = {&#10;            TopAppBarWithUserIcon(&#10;                title = &quot;What to Eat&quot;,&#10;                onUserIconClick = {&#10;                    // Navigate to profile if logged in, otherwise to login&#10;                    if (authViewModel.isLoggedIn.value) {&#10;                        navController.navigate(&quot;profile&quot;)&#10;                    } else {&#10;                        navController.navigate(&quot;login&quot;)&#10;                    }&#10;                }&#10;            )&#10;        },&#10;        bottomBar = {&#10;            // Add safe area for bottom bar using WindowInsets&#10;            Box(&#10;                modifier = Modifier&#10;                    .windowInsetsPadding(WindowInsets.safeDrawing.only(WindowInsetsSides.Bottom))&#10;            ) {&#10;                FancyBottomNavigationBar(&#10;                    items = bottomNavItems,&#10;                    selectedItemIndex = selectedItemIndex,&#10;                    onItemSelected = { index -&gt;&#10;                        selectedItemIndex = index&#10;                        navController.navigate(bottomNavItems[index].route) {&#10;                            // Pop up to start destination to avoid building up a large stack&#10;                            popUpTo(navController.graph.startDestinationId) {&#10;                                saveState = true&#10;                            }&#10;                            // Avoid multiple copies of the same destination&#10;                            launchSingleTop = true&#10;                            // Restore state when re-selecting a previously selected item&#10;                            restoreState = true&#10;                        }&#10;                    }&#10;                )&#10;            }&#10;        }&#10;    ) { innerPadding -&gt;&#10;        NavHost(&#10;            navController = navController,&#10;            startDestination = bottomNavItems[0].route,&#10;            modifier = Modifier.padding(innerPadding)&#10;        ) {&#10;            composable(&quot;home&quot;) { HomeScreen() }&#10;            composable(&quot;dish&quot;) { DishView() }&#10;            composable(&quot;ingredient&quot;) { IngredientView() }&#10;            composable(&quot;game&quot;) { GameView() }&#10;            composable(&quot;settings&quot;) { SettingScreen() }&#10;            composable(&quot;profile&quot;) { &#10;                ProfileScreen(&#10;                    onBackPressed = { navController.popBackStack() },&#10;                    onNavigateToLogin = { navController.navigate(&quot;login&quot;) }&#10;                )&#10;            }&#10;            composable(&quot;login&quot;) {&#10;                LoginScreen(&#10;                    onBackPressed = { navController.popBackStack() },&#10;                    onLoginSuccess = { &#10;                        navController.popBackStack()&#10;                        navController.navigate(&quot;profile&quot;)&#10;                    }&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.fxanhkhoa.what_to_eat_android&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Modifier&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.compose.rememberNavController&#10;import com.fxanhkhoa.what_to_eat_android.ui.theme.ThemeProvider&#10;import com.fxanhkhoa.what_to_eat_android.ui.components.FancyBottomNavigationBar&#10;import com.fxanhkhoa.what_to_eat_android.ui.components.TopAppBarWithUserIcon&#10;import com.fxanhkhoa.what_to_eat_android.ui.components.bottomNavItems&#10;import com.fxanhkhoa.what_to_eat_android.screens.*&#10;import com.fxanhkhoa.what_to_eat_android.utils.rememberSharedAuthViewModel&#10;import com.fxanhkhoa.what_to_eat_android.viewmodel.AuthViewModel&#10;&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            ThemeProvider {&#10;                MainScreen()&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun MainScreen() {&#10;    val navController = rememberNavController()&#10;    var selectedItemIndex by remember { mutableIntStateOf(0) }&#10;    val authViewModel = rememberSharedAuthViewModel()&#10;&#10;    Scaffold(&#10;        modifier = Modifier.fillMaxSize(),&#10;        topBar = {&#10;            TopAppBarWithUserIcon(&#10;                title = &quot;What to Eat&quot;,&#10;                onUserIconClick = {&#10;                    // Navigate to profile if logged in, otherwise to login&#10;                    if (authViewModel.isLoggedIn.value) {&#10;                        navController.navigate(&quot;profile&quot;)&#10;                    } else {&#10;                        navController.navigate(&quot;login&quot;)&#10;                    }&#10;                }&#10;            )&#10;        },&#10;        bottomBar = {&#10;            // Add safe area for bottom bar using WindowInsets&#10;            Box(&#10;                modifier = Modifier&#10;                    .windowInsetsPadding(WindowInsets.safeDrawing.only(WindowInsetsSides.Bottom))&#10;            ) {&#10;                FancyBottomNavigationBar(&#10;                    items = bottomNavItems,&#10;                    selectedItemIndex = selectedItemIndex,&#10;                    onItemSelected = { index -&gt;&#10;                        selectedItemIndex = index&#10;                        navController.navigate(bottomNavItems[index].route) {&#10;                            // Pop up to start destination to avoid building up a large stack&#10;                            popUpTo(navController.graph.startDestinationId) {&#10;                                saveState = true&#10;                            }&#10;                            // Avoid multiple copies of the same destination&#10;                            launchSingleTop = true&#10;                            // Restore state when re-selecting a previously selected item&#10;                            restoreState = true&#10;                        }&#10;                    }&#10;                )&#10;            }&#10;        }&#10;    ) { innerPadding -&gt;&#10;        NavHost(&#10;            navController = navController,&#10;            startDestination = bottomNavItems[0].route,&#10;            modifier = Modifier.padding(innerPadding)&#10;        ) {&#10;            composable(&quot;home&quot;) { HomeScreen() }&#10;            composable(&quot;dish&quot;) { DishView() }&#10;            composable(&quot;ingredient&quot;) { IngredientView() }&#10;            composable(&quot;game&quot;) { GameView() }&#10;            composable(&quot;settings&quot;) { SettingScreen() }&#10;            composable(&quot;profile&quot;) { &#10;                ProfileScreen(&#10;                    onBackPressed = { navController.popBackStack() },&#10;                    onNavigateToLogin = { navController.navigate(&quot;login&quot;) }&#10;                )&#10;            }&#10;            composable(&quot;login&quot;) {&#10;                LoginScreen(&#10;                    onBackPressed = { navController.popBackStack() },&#10;                    onLoginSuccess = { &#10;                        navController.popBackStack()&#10;                        navController.navigate(&quot;profile&quot;)&#10;                    }&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>